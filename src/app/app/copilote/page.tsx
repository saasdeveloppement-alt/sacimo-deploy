"use client"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { 
  Send, 
  Copy, 
  RefreshCw, 
  Brain, 
  MessageSquare, 
  Lightbulb,
  Mail,
  Phone,
  FileText,
  Target,
  TrendingUp,
  Users
} from "lucide-react"

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

const quickSuggestions = [
  { 
    icon: Users, 
    text: "G√©rer une objection client", 
    prompt: "Comment g√©rer l'objection d'un client qui dit que le prix est trop √©lev√© ?" 
  },
  { 
    icon: Mail, 
    text: "Reformuler un mail", 
    prompt: "Aide-moi √† reformuler ce mail professionnel pour un vendeur :" 
  },
  { 
    icon: Phone, 
    text: "R√©pondre √† un vendeur", 
    prompt: "Un vendeur me dit qu'il pr√©f√®re passer par sa ni√®ce qui s'y conna√Æt, que r√©pondre ?" 
  },
  { 
    icon: FileText, 
    text: "Optimiser une annonce", 
    prompt: "Comment optimiser cette annonce immobili√®re pour attirer plus de clients ?" 
  },
  { 
    icon: Target, 
    text: "Id√©es de relance", 
    prompt: "Donne-moi des id√©es cr√©atives pour relancer un client qui h√©site √† vendre" 
  },
  { 
    icon: MessageSquare, 
    text: "R√©diger un SMS", 
    prompt: "Aide-moi √† r√©diger un SMS professionnel pour confirmer un rendez-vous" 
  },
  { 
    icon: TrendingUp, 
    text: "Argumentaire de vente", 
    prompt: "Cr√©e un argumentaire de vente pour convaincre un vendeur de nous faire confiance" 
  }
]

export default function CopilotePage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: "Bonjour ! Je suis votre Copilote IA sp√©cialis√© en accompagnement commercial immobilier. Comment puis-je vous aider aujourd'hui ?",
      timestamp: new Date()
    }
  ])
  const [inputValue, setInputValue] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = async (message: string) => {
    if (!message.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: message,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue("")
    setIsLoading(true)

    // Simuler une r√©ponse IA (dans un vrai projet, appeler une API)
    setTimeout(() => {
      const assistantResponse = generateAIResponse(message)
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: assistantResponse,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, assistantMessage])
      setIsLoading(false)
    }, 1500)
  }

  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase()
    
    if (lowerMessage.includes('objection') || lowerMessage.includes('prix trop √©lev√©')) {
      return `Voici une approche structur√©e pour g√©rer cette objection :

**1. Validation de l'√©motion**
"Je comprends parfaitement votre pr√©occupation concernant le prix. C'est normal de vouloir s'assurer de faire le bon choix."

**2. Question de clarification**
"Pouvez-vous me dire ce qui vous fait penser que le prix est trop √©lev√© ? Est-ce par rapport √† d'autres biens que vous avez vus ?"

**3. Repositionnement sur la valeur**
"Ce bien pr√©sente des avantages uniques : [citer les points forts]. Le prix refl√®te cette valeur et la localisation exceptionnelle."

**4. Proposition de solution**
"Je peux vous proposer plusieurs options : n√©gocier avec le vendeur, vous montrer des comparatifs de march√©, ou explorer des solutions de financement."

Cette approche respecte le client tout en le guidant vers une d√©cision √©clair√©e.`
    }
    
    if (lowerMessage.includes('ni√®ce') || lowerMessage.includes('famille')) {
      return `Excellente question ! Voici une r√©ponse professionnelle et bienveillante :

**"Je comprends tout √† fait votre r√©flexion. Il est toujours rassurant de faire appel √† quelqu'un de confiance comme votre ni√®ce.**

**Cependant, mon r√¥le est justement d'accompagner les vendeurs pour :**
- Maximiser la visibilit√© de votre bien
- S√©curiser toutes les d√©marches juridiques
- Vendre au meilleur prix possible
- G√©rer les n√©gociations complexes

**Rien ne vous emp√™che d'en discuter avec votre ni√®ce. Je peux m√™me lui expliquer ma d√©marche si vous le souhaitez. L'important est que vous soyez √† l'aise avec votre choix.**

**Qu'est-ce qui vous ferait le plus confiance : que je vous explique ma m√©thode ou que nous en parlions ensemble avec votre ni√®ce ?"**

Cette approche respecte la relation familiale tout en valorisant votre expertise professionnelle.`
    }
    
    if (lowerMessage.includes('relance') || lowerMessage.includes('h√©site')) {
      return `Voici des id√©es de relance cr√©atives et professionnelles :

**üéØ Approche par la valeur ajout√©e**
"Bonjour [Nom], j'ai repens√© √† votre situation et j'ai une id√©e qui pourrait vous int√©resser : organiser une visite group√©e avec des acheteurs qualifi√©s. Cela pourrait acc√©l√©rer la vente."

**üìä Approche par les donn√©es**
"J'ai analys√© le march√© de votre secteur et j'ai des informations int√©ressantes √† partager. Puis-je vous appeler 5 minutes ?"

**ü§ù Approche par l'accompagnement**
"Je comprends que vendre peut √™tre stressant. J'aimerais vous proposer un accompagnement personnalis√© pour simplifier le processus."

**‚è∞ Approche par l'urgence douce**
"Le march√© √©volue rapidement en ce moment. Avez-vous 10 minutes pour que je vous explique les tendances actuelles ?"

**üí° Approche par l'innovation**
"J'ai d√©velopp√© une nouvelle m√©thode de pr√©sentation qui pourrait faire la diff√©rence. Voulez-vous que je vous la montre ?"

Choisissez l'approche qui correspond le mieux √† la personnalit√© de votre client !`
    }
    
    if (lowerMessage.includes('mail') || lowerMessage.includes('email')) {
      return `Pour optimiser vos emails professionnels, voici une structure efficace :

**üìß Structure optimale :**

**Objet :** [Sujet clair et actionnable]
Ex: "Visite confirm√©e - [Adresse] - [Date]"

**Salutation personnalis√©e :**
"Bonjour [Pr√©nom],"

**Contexte et valeur :**
"Suite √† notre √©change, je vous confirme que [action/rendez-vous]."

**Informations pratiques :**
- Date, heure, lieu
- Ce qu'il faut apporter
- Contact d'urgence

**Prochaines √©tapes :**
"Je vous enverrai [document/information] avant notre rendez-vous."

**Signature professionnelle :**
"[Votre nom]
[Votre agence]
[Coordonn√©es]"

**üí° Conseils :**
- Maximum 3 paragraphes
- Un seul appel √† l'action
- Ton professionnel mais chaleureux
- Toujours proposer un plan B

Voulez-vous que je vous aide √† r√©diger un email sp√©cifique ?`
    }
    
    if (lowerMessage.includes('annonce') || lowerMessage.includes('optimiser')) {
      return `Pour optimiser une annonce immobili√®re, voici les √©l√©ments cl√©s :

**üéØ Titre accrocheur :**
- Mentionnez le type de bien + localisation + point fort
- Ex: "T3 lumineux avec balcon - Centre-ville - Proche m√©tro"

**üìù Description structur√©e :**
1. **Accroche** (1 phrase qui donne envie)
2. **Points forts** (3-4 avantages majeurs)
3. **D√©tails techniques** (surface, pi√®ces, √©quipements)
4. **Localisation** (proximit√©s, transports)
5. **Call-to-action** (contact, visite)

**üì∏ Photos optimis√©es :**
- Photo principale : vue d'ensemble
- Photos de d√©tail : √©quipements, balcon, vue
- Photos de localisation : rue, commerces

**üí∞ Prix strat√©gique :**
- Juste en dessous des seuils psychologiques
- Ex: 299 000‚Ç¨ au lieu de 300 000‚Ç¨

**üîç Mots-cl√©s SEO :**
- Quartier, type de bien, √©quipements
- Transports, commerces, √©coles

Voulez-vous que je vous aide √† optimiser une annonce sp√©cifique ?`
    }
    
    if (lowerMessage.includes('sms') || lowerMessage.includes('message')) {
      return `Pour r√©diger des SMS professionnels efficaces :

**üì± Structure SMS :**
- Maximum 160 caract√®res
- Message clair et direct
- Ton professionnel mais accessible

**‚úÖ Exemples types :**

**Confirmation RDV :**
"Bonjour [Pr√©nom], RDV confirm√© [date] √† [heure] pour [adresse]. √Ä bient√¥t ! [Votre nom]"

**Relance douce :**
"Bonjour [Pr√©nom], j'ai une info int√©ressante sur votre secteur. 2 min pour vous l'expliquer ? [Votre nom]"

**Suivi apr√®s visite :**
"Merci pour la visite ! Des questions ? Je reste √† votre disposition. [Votre nom]"

**Rappel :**
"Rappel : RDV [date] √† [heure]. Si changement, merci de me pr√©venir. [Votre nom]"

**üí° Conseils :**
- Toujours signer
- √âviter les abr√©viations excessives
- Proposer un plan B
- Respecter les horaires (9h-19h)

Quel type de SMS voulez-vous r√©diger ?`
    }
    
    if (lowerMessage.includes('argumentaire') || lowerMessage.includes('convaincre')) {
      return `Voici un argumentaire de vente structur√© pour convaincre un vendeur :

**üéØ ARGUMENTAIRE "VALEUR AJOUT√âE"**

**1. Ouverture (Cr√©er la confiance)**
"Bonjour [Pr√©nom], je comprends que vendre votre bien est une d√©cision importante. Mon r√¥le est de vous accompagner pour maximiser vos chances de succ√®s."

**2. Diagnostic (Comprendre ses besoins)**
"Pouvez-vous me dire ce qui est le plus important pour vous : vendre rapidement, au meilleur prix, ou avec le moins de stress possible ?"

**3. Pr√©sentation de la solution (Nos avantages)**
"Voici comment je peux vous aider :
- **Visibilit√© maximale** : 15+ portails immobiliers
- **S√©curisation** : Suivi juridique complet
- **N√©gociation** : Expertise pour optimiser le prix
- **Accompagnement** : Un seul interlocuteur"

**4. Preuve sociale (T√©moignages)**
"L'ann√©e derni√®re, j'ai vendu 95% de mes mandats en moins de 2 mois, avec un prix moyen 8% au-dessus du march√©."

**5. Fermeture (Proposition claire)**
"√ätes-vous pr√™t √† me faire confiance pour vendre votre bien dans les meilleures conditions ?"

**üí° Adaptez selon la personnalit√© du vendeur !**
    }
    
    // R√©ponse par d√©faut
    return `Merci pour votre question ! En tant que Copilote IA sp√©cialis√© en immobilier, je suis l√† pour vous accompagner dans tous vos d√©fis commerciaux.

**Comment puis-je vous aider aujourd'hui ?**
- G√©rer des objections clients
- R√©diger des emails professionnels
- Cr√©er des argumentaires de vente
- Optimiser vos annonces
- Trouver des id√©es de relance
- Structurer vos n√©gociations

N'h√©sitez pas √† me poser des questions sp√©cifiques ou √† utiliser les suggestions rapides ci-dessus !`
  }

  const handleQuickSuggestion = (suggestion: typeof quickSuggestions[0]) => {
    setInputValue(suggestion.prompt)
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const clearChat = () => {
    setMessages([
      {
        id: '1',
        role: 'assistant',
        content: "Bonjour ! Je suis votre Copilote IA sp√©cialis√© en accompagnement commercial immobilier. Comment puis-je vous aider aujourd'hui ?",
        timestamp: new Date()
      }
    ])
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
                <Brain className="h-8 w-8 text-blue-600" />
                Copilote IA
              </h1>
              <p className="text-gray-600">Votre assistant immobilier personnel</p>
            </div>
            <Button 
              variant="outline" 
              onClick={clearChat}
              className="flex items-center gap-2"
            >
              <RefreshCw className="h-4 w-4" />
              Nouvelle conversation
            </Button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Suggestions rapides */}
          <div className="lg:col-span-1">
            <Card className="sticky top-6">
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <Lightbulb className="h-5 w-5 text-yellow-500" />
                  Suggestions rapides
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {quickSuggestions.map((suggestion, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    className="w-full justify-start h-auto p-3 text-left"
                    onClick={() => handleQuickSuggestion(suggestion)}
                  >
                    <div className="flex items-start gap-3">
                      <suggestion.icon className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
                      <span className="text-sm">{suggestion.text}</span>
                    </div>
                  </Button>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Chat */}
          <div className="lg:col-span-3">
            <Card className="h-[600px] flex flex-col">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MessageSquare className="h-5 w-5" />
                  Conversation
                </CardTitle>
              </CardHeader>
              <CardContent className="flex-1 flex flex-col p-0">
                {/* Messages */}
                <div className="flex-1 overflow-y-auto p-6 space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-[80%] rounded-lg p-4 ${
                          message.role === 'user'
                            ? 'bg-blue-600 text-white'
                            : 'bg-gray-100 text-gray-900'
                        }`}
                      >
                        <div className="whitespace-pre-wrap text-sm leading-relaxed">
                          {message.content}
                        </div>
                        <div className="flex items-center justify-between mt-2">
                          <span className="text-xs opacity-70">
                            {message.timestamp.toLocaleTimeString('fr-FR', { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </span>
                          {message.role === 'assistant' && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => copyToClipboard(message.content)}
                              className="h-6 w-6 p-0 opacity-70 hover:opacity-100"
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="bg-gray-100 rounded-lg p-4">
                        <div className="flex items-center gap-2">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                          <span className="text-sm text-gray-600">Le Copilote r√©fl√©chit...</span>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div ref={messagesEndRef} />
                </div>

                {/* Input */}
                <div className="border-t p-4">
                  <div className="flex gap-2">
                    <Input
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      placeholder="Posez une question au Copilote IA‚Ä¶"
                      className="flex-1"
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault()
                          handleSendMessage(inputValue)
                        }
                      }}
                    />
                    <Button
                      onClick={() => handleSendMessage(inputValue)}
                      disabled={!inputValue.trim() || isLoading}
                      className="px-4"
                    >
                      <Send className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
